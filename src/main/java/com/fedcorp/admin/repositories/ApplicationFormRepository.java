package com.fedcorp.admin.repositories;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.fedcorp.admin.entities.ApplicationForms;
import com.fedcorp.admin.entities.ApplicationStaus;
import com.fedcorp.admin.entities.ApplicationDetails;

@Repository
public interface ApplicationFormRepository extends JpaRepository<ApplicationForms, Long>{
	
	
	
	
	@Query( nativeQuery = true ,value="UPDATE application_forms SET status = 'rejected', status_desc = 'Application is rejected', rejected_by =:uname  WHERE application_forms.id =:applnid")
	String updateApplicationForm(@Param("uname") String uname,@Param("applnid") String applnid);
	
	
	@Query(value = "SELECT COUNT(DISTINCT application_forms.id) AS count_id, application_forms.status AS application_forms_status FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.applicationFormId= application_forms.id AND application_enterprises.active = '1'WHERE (application_forms.status != 'deleted')and APPLICATION_ENTERPRISES.BRANCH_ID IN (select ID from BRANCHES where BRANCH_CODE =:branchcode AND (APPLICATION_ENTERPRISES.BRANCH_ID IS NOT NULL) AND application_forms.status IN('pending', 'approved', 'new', 'modified', 'rejected') AND (application_enterprises.applicationFormId IS NOT NULL) GROUP BY application_forms.status) ", nativeQuery = true)
	Integer countDistinctApplicationform(@Param("branchcode") String branchcode );

	@Query(nativeQuery = true,   value="SELECT count(*) as sum FROM application_forms INNER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1' WHERE (application_forms.status != 'deleted') AND (application_forms.status not in ('verified','initiated','rejected') AND application_enterprises.active = '1' AND application_enterprises.acc_no =:acctno)")
	Integer totalCommonApplicationFromApplicationFormAndApplicationEnterprises(@Param("acctno") String acctno );



	
	@Query("select COUNT(DISTINCT app_forms.id) AS total, app_forms.status AS applicationStatus from ApplicationForms  app_forms left join ApplicationEnterprises app_enterprises ON app_enterprises.applicationFormId = app_forms.id  AND  app_enterprises.active = '1' WHERE (app_forms.status != 'deleted') AND app_enterprises.branchId IN (select id from Branch where branchCode =:branchcode) AND (app_enterprises.branchId IS NOT NULL) AND app_forms.status IN ('pending', 'approved', 'new', 'modified', 'rejected') AND (app_enterprises.applicationFormId IS NOT NULL) GROUP BY app_forms.status")
	List<ApplicationStaus>  countDistinctApplicationformWithBranch(@Param("branchcode") String branchcode);
	
	@Query("select COUNT(DISTINCT app_forms.id) AS total, app_forms.status AS applicationStatus from ApplicationForms  app_forms left join ApplicationEnterprises app_enterprises ON app_enterprises.applicationFormId = app_forms.id  AND  app_enterprises.active = '1' WHERE (app_forms.status != '2') AND app_forms.status IN ('pending', 'approved', 'new', 'modified', 'rejected')AND (app_enterprises.applicationFormId IS NOT NULL) GROUP BY app_forms.status ")
	List<ApplicationStaus> countDistinctApplicationformWithoutBranch();
	
	
	
	/*pending with branch list */
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applicationFormCreatedAt, application_forms.updated_at AS applicationFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applicationEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applnEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1' WHERE (application_forms.status != 'deleted') AND application_forms.status = 'new'  AND APPLICATION_ENTERPRISES.BRANCH_ID  IN (SELECT ID FROM BRANCHES WHERE BRANCH_CODE =:branchcode )  AND (APPLICATION_ENTERPRISES.BRANCH_ID  IS NOT NULL)AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> pendingWithBranchApplicationWithBranch(@Param("branchcode") String branchcode);
	
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at applicationFormCreatedAt, application_forms.updated_at AS  applicationFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applicationEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applnEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1' WHERE (application_forms.status != 'deleted') AND application_forms.status = 'new' AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> pendingWithBranchApplicationWithoutBranch();
	/*pending with branch list */
	
	
	
	
	/*pending with final approve list start*/
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applnEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1'   WHERE (application_forms.status!= '2') AND application_forms.status IN ('pending', 'modified')  AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> pendingWithFinalApplicationWithoutBranch();
	
	/*pending with final  approve  list end */
	
	
	
	/*approve list start*/
	
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applnEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1'   WHERE (application_forms.status!= '2') AND application_forms.status = 'approved'  AND APPLICATION_ENTERPRISES.BRANCH_ID IN  (SELECT ID FROM BRANCHES WHERE BRANCH_CODE =:branchcode) AND (APPLICATION_ENTERPRISES.BRANCH_ID  IS NOT NULL) AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> approvedApplicationWithBranch(@Param("branchcode") String branchcode);
	
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applnEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1'   WHERE (application_forms.status!= '2') AND application_forms.status = 'approved'  AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> approvedApplicationWithoutBranch();
	
	/*approve  list end */
	
	
	/*rejected list start*/
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdatedAt, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,  application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1'   WHERE (application_forms.status!= '2') AND application_forms.status = 'rejected' AND APPLICATION_ENTERPRISES.BRANCH_ID IN(SELECT ID FROM BRANCHES WHERE BRANCH_CODE = :branchcode )AND (APPLICATION_ENTERPRISES.BRANCH_ID IS NOT NULL)  AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> rejectedApplicationWithBranch(@Param("branchcode") String branchcode);
	
	@Query(nativeQuery = true,  value ="SELECT *  FROM (SELECT A.*, rownum rn FROM (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdatedAt, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod  FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1'   WHERE (application_forms.status!= '2') AND application_forms.status = 'rejected'  AND (application_enterprises.application_form_id IS NOT NULL) ORDER BY application_forms.updated_at desc) A WHERE rownum <=100) WHERE rn >0")
	List<ApplicationDetails> rejectedApplicationWithoutBranch();
	/*rejected list end */
	
	@Query(nativeQuery = true, value="select * from (SELECT   application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdatedAt, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod ,branches.id AS branchId, branches.sol_id  AS solId,   branches.BRANCH_CODE  AS branchCode,   branches.BRANCH_NAME  AS branchName,  branches.REG_CD  AS regCd,  branches.ZONE_CODE   AS zoneCode,  branches.created_at AS branchCreatedAt,  branches.updated_at AS BranchUpdatedAt ,  branch_verifications.id AS branchVerificationId, branch_verifications.APPLICATION_FORM_ID  AS applicationFormId, branch_verifications.MODE_OF_OPERATION  AS modeOfOperation, branch_verifications.BOARD_RESOLUTION_CONFIRMED   AS boardResolutionConfirmed, branch_verifications.MODE_OF_OPERATION_CONFIRMED AS modeOfOperationConfirmed, branch_verifications.USER_DETAILS_CONFIRMED AS userDetailsConfirmed FROM application_forms , application_enterprises,branches left join  branch_verifications ON branch_verifications.application_form_id =:applnformid WHERE (application_forms.status != 'deleted') AND application_forms.id =:applnformid and application_enterprises.active = '1' AND application_enterprises.application_form_id = application_forms.id and branches.id = application_enterprises.BRANCH_ID) where  ROWNUM = 1")
	ApplicationDetails getForwardedApplicationDetails(@Param("applnformid") String applnformid);	
	
	
	@Query(nativeQuery = true, value="SELECT   application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS updated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id    = application_forms.id AND application_enterprises.active = '1' WHERE (application_forms.status != 'deleted')AND (application_forms.status  = 'pending' OR application_forms.status = 'modified')AND (application_enterprises.application_form_id IS NOT NULL)AND (application_forms.ref_no  = :search_refno OR application_enterprises.ACC_NAME  =:search_acc_name OR application_enterprises.ACC_NO  =:search_acc_no OR application_enterprises.MOBILE=:search_mobile) ORDER BY application_forms.updated_at DESC")
	List<ApplicationDetails> searchPendingApplicationForm(@Param("search_refno") String search_refno, @Param("search_acc_name")String search_acc_name,@Param("search_acc_no")String search_acc_no,@Param("search_mobile") String search_mobile);	
	
	
	@Query(nativeQuery = true, value="SELECT   application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS updated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive, application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1' WHERE (application_forms.status != 'deleted') AND application_forms.status = :search_status AND (application_enterprises.application_form_id IS NOT NULL) AND (application_forms.ref_no  = :search_refno OR application_enterprises.ACC_NAME =:search_acc_name OR application_enterprises.ACC_NO  =:search_acc_no OR application_enterprises.MOBILE   =:search_mobile) ORDER BY application_forms.updated_at DESC")
	List<ApplicationDetails> searchApplicationFormNotPending(@Param("search_status") String search_status, @Param("search_refno") String search_refno, @Param("search_acc_name")String search_acc_name,@Param("search_acc_no")String search_acc_no,@Param("search_mobile") String search_mobile);

	@Query(nativeQuery = true, value="SELECT   application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS updated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive, application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active  = '1' WHERE (application_forms.status != 'deleted') AND (application_forms.status = 'pending' OR application_forms.status = 'modified') AND APPLICATION_ENTERPRISES.BRANCH_ID IN (SELECT ID FROM BRANCHES WHERE BRANCH_CODE = :branchcode) AND (APPLICATION_ENTERPRISES.BRANCH_ID IS NOT NULL) AND (application_enterprises.application_form_id IS NOT NULL) AND (application_forms.ref_no = :search_refno OR application_enterprises.ACC_NAME =:search_acc_name OR application_enterprises.ACC_NO  =:search_acc_no OR application_enterprises.MOBILE =:search_mobile) ORDER BY application_forms.updated_at DESC")
	List<ApplicationDetails> searchPendingApplicationFormWithBranch(@Param("branchcode") String branchcode, @Param("search_refno") String search_refno, @Param("search_acc_name")String search_acc_name,@Param("search_acc_no")String search_acc_no,@Param("search_mobile") String search_mobile);


	@Query(nativeQuery = true, value="SELECT   application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS updated_at, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive, application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod FROM application_forms LEFT OUTER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active  = '1' LEFT OUTER JOIN APPLICATION_USERS au ON au.APPLICATION_ENTERPRISE_ID =application_enterprises.ID WHERE (application_forms.status  != 'deleted') AND application_forms.status =:search_status AND APPLICATION_ENTERPRISES.BRANCH_ID IN (SELECT ID FROM BRANCHES WHERE BRANCH_CODE =:branchcode) AND (APPLICATION_ENTERPRISES.BRANCH_ID  IS NOT NULL) AND (application_enterprises.application_form_id IS NOT NULL) AND (application_forms.ref_no = :search_refno OR application_enterprises.ACC_NAME  =:search_acc_name OR application_enterprises.ACC_NO =:search_acc_no OR au.MOBILE =:search_mobile) ORDER BY application_forms.updated_at DESC")
	List<ApplicationDetails> searchStatusApplicationFormWithBranch(@Param("search_status") String search_status,@Param("branchcode") String branchcode, @Param("search_refno") String search_refno, @Param("search_acc_name")String search_acc_name,@Param("search_acc_no")String search_acc_no,@Param("search_mobile") String search_mobile);


	@Query(nativeQuery = true, value="select * from (SELECT  application_forms.id AS id, application_forms.declaration  AS declaration, application_forms.ref_no  AS refNo, application_forms.status_desc   AS statusDesc,application_forms.created_at AS applnFormCreatedAt, application_forms.updated_at AS applnFormUpdatedAt, application_forms.status  AS status, application_forms.created_by  AS createdBy, application_forms.reference_id   AS referenceId, application_forms.forwarded_by  AS forwardedBy,  application_forms.approved_by AS approvedBy, application_forms.forwarded_at  AS forwardedAt, application_forms.approved_at    AS approvedAt,  application_forms.rejected_by   AS rejectedBy, application_forms.rejected_at   AS rejectedAt, application_forms.modified_by  AS modifiedBy,   application_forms.modified_at  AS modifiedAt, application_forms.resubmitted_by   AS resubmittedBy, application_forms.resubmitted_at AS resubmittedAt, application_enterprises.id  AS applnEnterprisesId,  application_enterprises.acc_name AS accName, application_enterprises.cust_no  AS custNo,   application_enterprises.acc_no   AS accNo,  application_enterprises.address AS address, application_enterprises.pin   AS pin, application_enterprises.application_form_id AS applicationEnterprisesFormId, application_enterprises.email     AS email, application_enterprises.mobile  AS mobile, application_enterprises.acc_type   AS accType,  application_enterprises.auth_fund  AS authFund,  application_enterprises.auth_ext  AS authExt, application_enterprises.auth_ben  AS authBen,  application_enterprises.pref_corp    AS prefCorp, application_enterprises.created_at  AS applnEnterprisesCreatedAt,  application_enterprises.updated_at  AS applnEnterprisesUpdatedAt, application_enterprises.constitution  AS constitution,  application_enterprises.branch_id AS applnEnterprisesBranchId,  application_enterprises.active   AS applnEnterprisesActive,      application_enterprises.daily_limit AS dailyLimit, application_enterprises.monthly_limit  AS monthlyLimit, application_enterprises.cooling_period AS coolingPeriod ,branches.id AS branchId, branches.sol_id  AS solId,   branches.BRANCH_CODE  AS branchCode,   branches.BRANCH_NAME  AS branchName,  branches.REG_CD  AS regCd,  branches.ZONE_CODE   AS zoneCode,  branches.created_at AS branchCreatedAt,  branches.updated_at AS BranchUpdatedAt ,  branch_verifications.id AS branchVerificationId, branch_verifications.APPLICATION_FORM_ID  AS applicationFormId, branch_verifications.MODE_OF_OPERATION  AS modeOfOperation, branch_verifications.BOARD_RESOLUTION_CONFIRMED   AS boardResolutionConfirmed, branch_verifications.MODE_OF_OPERATION_CONFIRMED AS modeOfOperationConfirmed, branch_verifications.USER_DETAILS_CONFIRMED AS userDetailsConfirmed FROM application_enterprises join application_forms on application_enterprises.application_form_id = application_forms.id join branches on branches.id = application_enterprises.BRANCH_ID left join branch_verifications on branch_verifications.application_form_id = application_forms.id where application_forms.id =:applicationid) where  ROWNUM = 1")
	ApplicationDetails pendingWithFinalappln(String applicationid);

	@Query(nativeQuery = true,value="SELECT count(*) as sum FROM application_forms INNER JOIN application_enterprises ON application_enterprises.application_form_id = application_forms.id AND application_enterprises.active = '1' WHERE (application_forms.status != 'deleted') AND (application_forms.status not in ('verified','initiated','rejected') AND application_enterprises.active = '1' AND application_enterprises.acc_no =:acctnumber)")
	List<Integer> countApplicationform(@Param("acctnumber") String acctnumber);	
	
	
}


